#!/usr/bin/env ruby

# Copyright (C) 2015 Hector Sanjuan

# This file is part of Crubyflie.

# Crubyflie is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Crubyflie is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Crubyflie.  If not, see <http://www.gnu.org/licenses/>

$: << File.join(File.dirname(__FILE__), '..', 'lib')

require 'crubyflie'
require 'trollop'

# This script allows to fly the Crazyflie usingi the Joystick controller
# and initializing a Crazyflie. It might need a bit of cleanup but it does
# the job.

opts = Trollop::options do
    opt(:joystick_id, "Joystick ID",
        :type => :int,
        :default => 0,
        :short => '-j')
    opt(:cf_uri, "Crazyflie URI (defaults to first one found in scan)",
        :type => :string,
        :short => '-f')
    opt(:config, "Joystick configuration, defaults to default cfg in configs/",
        :type => :string,
        :default => Crubyflie::Joystick::DEFAULT_CONFIG_PATH,
        :short => '-c')
    opt(:debug, "Enable debug messages",
        :short => '-d')
end

include Crubyflie
$debug = true if opts[:debug]

cf = Crazyflie.new('/tmp/crubyflie')

# Before opening any link, scan for interfaces
uris = cf.scan_interface
if uris.empty?
    logger.error("No crazyflies found")
    exit 1
end
logger.info("Found copters at: #{uris}")
if uri = opts[:cf_uri] && !uris.include?(opts[:cf_uri])
    logger.error("Provided URI not found")
    exit 1
end

uri ||= uris.first

# Open a link to the copter
cf.open_link(uri)
# Make sure everything is still good
exit 1 if !cf.active?

# Initialize the joystick - ID defaults to 0
joystick = Joystick.new(opts[:config], opts[:joystick_id])
joystick.init()

exit = false
Signal.trap("SIGINT") do
    exit = true
end

logger.info("Cleared for take-off!")

while cf.active? && !exit do
    start_time = Time.now.to_f
    joystick.read_input()
    joystick.apply_input(cf)
    # We should be good sending 10 ticks per second,
    # as it says that somewhere in the docs, so we have
    # 1/10 secs of time per loop. If we are fast, we can sleep
    # a little bit
    consumed_time = Time.now.to_f - start_time
    sleep_time = 0.1 - consumed_time
    sleep sleep_time if sleep_time > 0
end

joystick.quit()
cf.close_link()
warn "\n"
logger.info("Bye bye!")
